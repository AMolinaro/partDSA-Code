library("partDSA")
help(partDSA)
install.packages("~/Downloads/partDSA_0.9.6.tar", repos = NULL)
install.packages("~/Downloads/partDSA_0.9.6.tar.gz", repos = NULL, type = "source")
library(partDSA)
help(partDSA)
dat <- read.table("/Users/annettemolinaro/Dropbox/Yale/Current Projects/Survival Paper/Paper Jan 2011/data_6_11/nabtc/SendRob.txt",sep="\t",header=TRUE,as.is=FALSE)
summary(dat)
dat[1,]
sep="\t",header=TRUE,as.is=TRUE)
dat <- read.table("/Users/annettemolinaro/Dropbox/Yale/Current Projects/Survival Paper/Paper Jan 2011/data_6_11/nabtc/SendRob.txt",
sep="\t",header=TRUE,as.is=TRUE)
summary(dat)
dat <- read.table("/Users/annettemolinaro/Dropbox/Yale/Current Projects/Survival Paper/Paper Jan 2011/data_6_11/nabtc/SendRob.txt",
sep="\t",header=TRUE,as.is=FALSE)
dat[1,]
table(dat$cens)
dat2 <- dat[which(dat$cens==1),]
dat3 <- dat2
dat3$OS <- log(dat3$OS)
table(male)
table(dat3#male)
table(dat3$male)
table(dat3$male)
table(dat3$ps2)
table(dat3$GRADE)
table(dat3$pchemo)
dat4 <- dat3[,-which(colnames(dat3)=="academic"|colnames(dat3)=="cens")]
dat4$pchemo[which(dat4$pchemo=="")] <- NA
table(dat4$chemo)
table(dat4$pchemo)
dat5 <- dat4[,is.na(match(colnames(dat4),c("dxtime","extpres","prelapse","lowgr")))]
dat5$pchemo[is.na(dat5$pchemo)] <- "Yes"
dat5$KarnofskyPS[is.na(dat5$KarnofskyPS)] <- 80
dim(dat5)
dat5[1,]
control.2.5 <- DSA.control(vfold=10,minbuck = 5, cut.off.growth = 2, loss.function = "default",MPD = .1,boost=1,boost.num.trees=5)
n.training <- n#round(n/2)
training.indices <- matrix(NA,nrow=n.training,ncol=nreps)
test.indices <- matrix(NA,nrow=n.test,ncol=nreps)
training.indices <- matrix(NA,nrow=n.training,ncol=nreps)
n.training <- n#round(n/2)
n <- nrow(dat5)
n.training <- n#round(n/2)
training.indices <- matrix(NA,nrow=n.training,ncol=nreps)
index.training <- sort(sample(1:n,n.training,replace=FALSE))
training.indices[,i] <- index.training
training.indices <- matrix(NA,nrow=n.training,ncol=nreps)
nreps <- 50
training.indices <- matrix(NA,nrow=n.training,ncol=nreps)
training.indices[,i] <- index.training
dat5.training <- dat5[index.training,]
dat5.training.x <- dat5.training[,which(colnames(dat5.training)!="OS")]
dat5.training.y <- dat5.training[,which(colnames(dat5.training)=="OS")]
control.3.25 <- DSA.control(vfold=10,minbuck = 5, cut.off.growth = 3, loss.function = "default",MPD = .1,boost=1,boost.num.trees=25)
n <- nrow(dat5)
n.training <- round(n/4)
n.test <- n-n.training
nreps <- 50
training.indices <- matrix(NA,nrow=n.training,ncol=nreps)
test.indices <- matrix(NA,nrow=n.test,ncol=nreps)
set.seed(5139)
i<-1
index.training <- sort(sample(1:n,n.training,replace=FALSE))
index.test <- (1:n)[-index.training]
training.indices[,i] <- index.training
test.indices[,i] <- index.test
dat5.training <- dat5[index.training,]
dat5.test <- dat5[index.test,]
dat5.training.x <- dat5.training[,which(colnames(dat5.training)!="OS")]
dat5.training.y <- dat5.training[,which(colnames(dat5.training)=="OS")]
dat5.training.truth <- dat5.training.y
dat5.test.x <- dat5.test[,which(colnames(dat5.test)!="OS")]
dat5.test.y <- dat5.test[,which(colnames(dat5.test)=="OS")]
dat5.test.truth <- dat5.test.y
control <- DSA.control(vfold=10,minbuck = 5, cut.off.growth=25, loss.function = "default",
MPD = .1,leafy=0,missing='impute.at.split',save.input=TRUE)
Model<-partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),control = control)
PredictedCurrent<-predict(Model,dat5.test.x,as.matrix(test.y))
cv.risk <- Model$mean.cv.risk.DSA
cv.risk[is.na(cv.risk)] <- Inf
Model
min(order(cv.risk)[1],ncol(PredictedCurrent))
Model$mean.cv.risk.DSA
showDSA(Model)
coxph(Surv(dat5.training.y,rep(1,length(dat5.training.y)))~Model$pred.test.set.DSA[,4])
coxph(Surv(dat5.training.y,rep(1,length(dat5.training.y)))~factor(Model$pred.test.set.DSA[,4])
)
plot(survfit(Surv(dat5.training.y,rep(1,length(dat5.training.y)))~factor(Model$pred.test.set.DSA[,4]))
)
showDSA(Model)
plot(survfit(Surv(dat5.training.y,rep(1,length(dat5.training.y)))~factor(Model$pred.test.set.DSA[,3])))
plot(survfit(Surv(dat5.training.y,rep(1,length(dat5.training.y)))~factor(Model$pred.test.set.DSA[,3])),col=1:3)
chosen.model <- min(order(cv.risk)[1],ncol(PredictedCurrent))
chosen.model.plusone <- min(chosen.model+1,25,ncol(PredictedCurrent))
PredictedValuesCurrent<-PredictedCurrent[,chosen.model]
keepers.model <- which(!is.na(PredictedValuesCurrent))
ErrorToTruthCurrent.partDSA <-(sum(( PredictedValuesCurrent[keepers.model] - as.matrix(dat5.test.y[keepers.model]))^2))/length(keepers.model)
control.3.25 <- DSA.control(vfold=10,minbuck = 5, cut.off.growth = 3, loss.function = "default",MPD = .1,boost=1,boost.num.trees=25)
Model.3.25 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.3.25)
Model.3.25
sum((Model.3.25$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
Model.rf<-randomForest(x=dat5.training.x,y=as.matrix(dat5.training.y),ntree = 500)
library(randomForest)
Model.rf<-randomForest(x=dat5.training.x,y=as.matrix(dat5.training.y),ntree = 500)
PredictedValuesCurrent.rf <-predict(Model.rf,dat5.test.x)
PredictedErrorCurrent.rf <-sum(((PredictedValuesCurrent.rf - dat5.test.y)^2))/n.test
VIMPCurrent.rf<-Model.rf$importance
ErrorToTruthCurrent.rf<-(sum(( PredictedValuesCurrent.rf - as.matrix(dat5.test.y))^2))/n.test
PredictedValuesCurrent.rf
ErrorToTruthCurrent.rf
as.matrix(dat5.test.y)
dat5.test.y
(sum(( PredictedValuesCurrent.rf - as.matrix(dat5.test.y))^2))/n.test
control.10.25 <- DSA.control(vfold=10,minbuck = 5, cut.off.growth = 10, loss.function = "default",MPD = .1,boost=1,boost.num.trees=25)
control.5.25 <- DSA.control(vfold=10,minbuck = 5, cut.off.growth = 5, loss.function = "default",MPD = .1,boost=1,boost.num.trees=25)
Model.5.25 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.3.25)
Model.5.25 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.5.25)
ErrorToTruthCurrent.5.25 <- sum((Model.5.25$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
ErrorToTruthCurrent.5.25
control.5.50 <- DSA.control(vfold=10,minbuck = 5, cut.off.growth = 5, loss.function = "default",MPD = .1,boost=1,boost.num.trees=50)
Model.5.50 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.5.50)
ErrorToTruthCurrent.5.50 <- sum((Model.5.50$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
ErrorToTruthCurrent.5.50
control.10.50 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 5, loss.function = "default",MPD = .1,boost=1,boost.num.trees=50)
Model.10.50 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.10.50)
ErrorToTruthCurrent.10.50 <- sum((Model.10.50$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
ErrorToTruthCurrent.10.50
control.10.50 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 5, loss.function = "default",MPD = .01,boost=1,boost.num.trees=50)
Model.10.50 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.10.50)
ErrorToTruthCurrent.10.50 <- sum((Model.10.50$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
ErrorToTruthCurrent.10.50
control.10.50 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 5, loss.function = "default",MPD = .2,boost=1,boost.num.trees=50)
Model.10.50 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.10.50)
ErrorToTruthCurrent.10.50 <- sum((Model.10.50$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
ErrorToTruthCurrent.10.50
ErrorToTruthCurrent.partDSA
length(keepers.model)
PredictedValuesCurrent.plusone<-PredictedCurrent[,chosen.model.plusone]
keepers.model.plusone <- which(!is.na(PredictedValuesCurrent.plusone))
ErrorToTruthCurrent.partDSA.plusone <-(sum(( PredictedValuesCurrent.plusone[keepers.model.plusone] - as.matrix(dat5.test.y[keepers.model.plusone]))^2))/length(keepers.model)
ErrorToTruthCurrent.partDSA.plusone
ErrorToTruthCurrent.partDSA
plot(survfit(Surv(dat5.train.x,rep(1,length(dat5.train.y)))~Model$pred.test.set.DSA[,4]))
plot(survfit(Surv(dat5.training.y,rep(1,length(dat5.training.y)))~Model$pred.test.set.DSA[,4]))
plot(survfit(Surv(dat5.training.y,rep(1,length(dat5.training.y)))~Model$pred.test.set.DSA[,4]),col=1:5)
plot(survfit(Surv(dat5.training.y,rep(1,length(dat5.training.y)))~Model$pred.test.set.DSA[,3]),col=1:5)
plot(survfit(Surv(test.y,rep(1,length(test.y)))~Model$pred.test.set.DSA[,3]),col=1:5)
as.matrix(test.y)
PredictedCurrent<-predict(Model,dat5.test.x,as.matrix(dat5.test.y))
plot(survfit(Surv(dat5.test.y,rep(1,length(dat5.test.y)))~Model$pred.test.set.DSA[,3]),col=1:5)
PredictedCurrent
dim(PredictedCurrent)
plot(survfit(Surv(dat5.test.y,rep(1,length(dat5.test.y)))~factor(PredictedCurrent[,3]),col=1:5)
)
table(PredictedCurrent[,3])
plot(survfit(Surv(dat5.test.y,rep(1,length(dat5.test.y)))~factor(PredictedCurrent[,3])),col=1:5)
plot(survfit(Surv(dat5.test.y,rep(1,length(dat5.test.y)))~factor(PredictedCurrent[,4])),col=1:5)
DSA.control(vfold=10,minbuck = 5, cut.off.growth = 5, loss.function = "default",MPD = .1,boost=1,boost.num.trees=50)
control.5.50 <- DSA.control(vfold=10,minbuck = 5, cut.off.growth = 5, loss.function = "default",MPD = .1,boost=1,boost.num.trees=50)
vfold=10
minbuck = 5
cut.off.growth = 5
loss.function = "default"
MPD = .1
boost=1
boost.num.trees=50
control.10.50 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 3, loss.function = "default",MPD = 0,boost=1,boost.num.trees=50)
Model.10.50 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.10.50)
control.10.50 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 3, loss.function = "default",MPD = 0.001,boost=1,boost.num.trees=10)
Model.10.50 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.10.50)
ErrorToTruthCurrent.10.50 <- sum((Model.10.50$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
ErrorToTruthCurrent.10.50
control.10.50.1 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 3, loss.function = "default",MPD = 0.1,boost=1,boost.num.trees=10)
Model.10.50.1 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.10.50.1)
ErrorToTruthCurrent.10.50.1 <- sum((Model.10.50.1$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
ErrorToTruthCurrent.10.50.1
control.10.10.5 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 5, loss.function = "default",MPD = 0.5,boost=1,boost.num.trees=10)
Model.10.10.5 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.10.10.5)
ErrorToTruthCurrent.10.10.5 <- sum((Model.10.10.5$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
ErrorToTruthCurrent.10.10.5
control.10.10.5 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 5, loss.function = "default",MPD = 0.2,boost=1,boost.num.trees=10)
Model.10.10.5 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.10.10.5)
ErrorToTruthCurrent.10.10.5 <- sum((Model.10.10.5$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
ErrorToTruthCurrent.10.10.5
control.10.10.5 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 3, loss.function = "default",MPD = 0.2,boost=1,boost.num.trees=10)
Model.10.10.5 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.10.10.5)
ErrorToTruthCurrent.10.10.5 <- sum((Model.10.10.5$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
ErrorToTruthCurrent.10.10.5
control.10.10.5 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 3, loss.function = "default",MPD = 0.01,boost=1,boost.num.trees=10)
Model.10.10.5 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.10.10.5)
ErrorToTruthCurrent.10.10.5 <- sum((Model.10.10.5$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
ErrorToTruthCurrent.10.10.5
control.10.10.5 <- DSA.control(vfold=10,minbuck = 5, cut.off.growth = 3, loss.function = "default",MPD = 0.1,boost=1,boost.num.trees=10)
Model.10.10.5 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.10.10.5)
ErrorToTruthCurrent.10.10.5 <- sum((Model.10.10.5$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
ErrorToTruthCurrent.10.10.5
control.10.10.5 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 3, loss.function = "default",MPD = 0.1,boost=1,boost.num.trees=10)
Model.10.10.5 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.10.10.5)
ErrorToTruthCurrent.10.10.5 <- sum((Model.10.10.5$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
ErrorToTruthCurrent.10.10.5
i<-1
control.2.5 <- DSA.control(vfold=10,minbuck = 5, cut.off.growth = 2, loss.function = "default",MPD = .1,boost=1,boost.num.trees=5)
Model.2.5 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.2.5)
ErrorToTruthCurrent.2.5 <- sum((Model.2.5$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
if(i==1)
{
write(Model.2.5$Predicted.Test.Set.Values,"PredictedValuesCurrent_2.5.txt",ncol=1)
write(ErrorToTruthCurrent.2.5,"ErrorToTruthCurrent_2.5.txt",ncol=1)
}
else
{
write(Model.2.5$Predicted.Test.Set.Values,"PredictedValuesCurrent_2.5.txt",ncol=1,append=TRUE)
write(ErrorToTruthCurrent.2.5,"ErrorToTruthCurrent_2.5.txt",ncol=1,append=TRUE)
}
control.2.10 <- DSA.control(vfold=10,minbuck = 5, cut.off.growth = 2, loss.function = "default",MPD = .1,boost=1,boost.num.trees=10)
Model.2.10 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.2.10)
ErrorToTruthCurrent.2.10 <- sum((Model.2.10$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
if(i==1)
{
write(Model.2.10$Predicted.Test.Set.Values,"PredictedValuesCurrent_2.10.txt",ncol=1)
write(ErrorToTruthCurrent.2.10,"ErrorToTruthCurrent_2.10.txt",ncol=1)
}
else
{
write(Model.2.10$Predicted.Test.Set.Values,"PredictedValuesCurrent_2.10.txt",ncol=1,append=TRUE)
write(ErrorToTruthCurrent.2.10,"ErrorToTruthCurrent_2.10.txt",ncol=1,append=TRUE)
}
control.2.25 <- DSA.control(vfold=10,minbuck = 5, cut.off.growth = 2, loss.function = "default",MPD = .1,boost=1,boost.num.trees=25)
Model.2.25 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.2.25)
ErrorToTruthCurrent.2.25 <- sum((Model.2.25$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
if(i==1)
{
write(Model.2.25$Predicted.Test.Set.Values,"PredictedValuesCurrent_2.25.txt",ncol=1)
write(ErrorToTruthCurrent.2.25,"ErrorToTruthCurrent_2.25.txt",ncol=1)
}
else
{
write(Model.2.25$Predicted.Test.Set.Values,"PredictedValuesCurrent_2.25.txt",ncol=1,append=TRUE)
write(ErrorToTruthCurrent.2.25,"ErrorToTruthCurrent_2.25.txt",ncol=1,append=TRUE)
}
control.2.50 <- DSA.control(vfold=10,minbuck = 5, cut.off.growth = 2, loss.function = "default",MPD = .1,boost=1,boost.num.trees=50)
Model.2.50 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.2.50)
ErrorToTruthCurrent.2.50 <- sum((Model.2.50$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
if(i==1) {
write(Model.2.50$Predicted.Test.Set.Values,"PredictedValuesCurrent_2.50.txt",ncol=1)
write(ErrorToTruthCurrent.2.50,"ErrorToTruthCurrent_2.50.txt",ncol=1)
} else {
write(Model.2.50$Predicted.Test.Set.Values,"PredictedValuesCurrent_2.50.txt",ncol=1,append=TRUE)
write(ErrorToTruthCurrent.2.50,"ErrorToTruthCurrent_2.50.txt",ncol=1,append=TRUE)
}
control.3.5 <- DSA.control(vfold=10,minbuck = 5, cut.off.growth = 3, loss.function = "default",MPD = .1,boost=1,boost.num.trees=5)
Model.3.5 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.3.5)
ErrorToTruthCurrent.3.5 <- sum((Model.3.5$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
if(i==1)
{
write(Model.3.5$Predicted.Test.Set.Values,"PredictedValuesCurrent_3.5.txt",ncol=1)
write(ErrorToTruthCurrent.3.5,"ErrorToTruthCurrent_3.5.txt",ncol=1)
}
else
{
write(Model.3.5$Predicted.Test.Set.Values,"PredictedValuesCurrent_3.5.txt",ncol=1,append=TRUE)
write(ErrorToTruthCurrent.3.5,"ErrorToTruthCurrent_3.5.txt",ncol=1,append=TRUE)
}
control.3.10 <- DSA.control(vfold=10,minbuck = 5, cut.off.growth = 3, loss.function = "default",MPD = .1,boost=1,boost.num.trees=10)
Model.3.10 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.3.10)
ErrorToTruthCurrent.3.10 <- sum((Model.3.10$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
if(i==1)
{
write(Model.3.10$Predicted.Test.Set.Values,"PredictedValuesCurrent_3.10.txt",ncol=1)
write(ErrorToTruthCurrent.3.10,"ErrorToTruthCurrent_3.10.txt",ncol=1)
}
else
{
write(Model.3.10$Predicted.Test.Set.Values,"PredictedValuesCurrent_3.10.txt",ncol=1,append=TRUE)
write(ErrorToTruthCurrent.3.10,"ErrorToTruthCurrent_3.10.txt",ncol=1,append=TRUE)
}
control.3.25 <- DSA.control(vfold=10,minbuck = 5, cut.off.growth = 3, loss.function = "default",MPD = .1,boost=1,boost.num.trees=25)
Model.3.25 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.3.25)
ErrorToTruthCurrent.3.25 <- sum((Model.3.25$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
if(i==1)
{
write(Model.3.25$Predicted.Test.Set.Values,"PredictedValuesCurrent_3.25.txt",ncol=1)
write(ErrorToTruthCurrent.3.25,"ErrorToTruthCurrent_3.25.txt",ncol=1)
}
else
{
write(Model.3.25$Predicted.Test.Set.Values,"PredictedValuesCurrent_3.25.txt",ncol=1,append=TRUE)
write(ErrorToTruthCurrent.3.25,"ErrorToTruthCurrent_3.25.txt",ncol=1,append=TRUE)
}
control.3.50 <- DSA.control(vfold=10,minbuck = 5, cut.off.growth = 3, loss.function = "default",MPD = .1,boost=1,boost.num.trees=50)
Model.3.50 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.3.50)
ErrorToTruthCurrent.3.50 <- sum((Model.3.50$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
if(i==1)
{
write(Model.3.50$Predicted.Test.Set.Values,"PredictedValuesCurrent_3.50.txt",ncol=1)
write(ErrorToTruthCurrent.3.50,"ErrorToTruthCurrent_3.50.txt",ncol=1)
}
else
{
write(Model.3.50$Predicted.Test.Set.Values,"PredictedValuesCurrent_3.50.txt",ncol=1,append=TRUE)
write(ErrorToTruthCurrent.3.50,"ErrorToTruthCurrent_3.50.txt",ncol=1,append=TRUE)
}
control.2.5 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 2, loss.function = "default",MPD = .1,boost=1,boost.num.trees=5)
Model.2.5 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.2.5)
ErrorToTruthCurrent.2.5 <- sum((Model.2.5$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
if(i==1)
{
write(Model.2.5$Predicted.Test.Set.Values,"PredictedValuesCurrent_2.5.txt",ncol=1)
write(ErrorToTruthCurrent.2.5,"ErrorToTruthCurrent_2.5.txt",ncol=1)
}
else
{
write(Model.2.5$Predicted.Test.Set.Values,"PredictedValuesCurrent_2.5.txt",ncol=1,append=TRUE)
write(ErrorToTruthCurrent.2.5,"ErrorToTruthCurrent_2.5.txt",ncol=1,append=TRUE)
}
control.2.10 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 2, loss.function = "default",MPD = .1,boost=1,boost.num.trees=10)
Model.2.10 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.2.10)
ErrorToTruthCurrent.2.10 <- sum((Model.2.10$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
if(i==1)
{
write(Model.2.10$Predicted.Test.Set.Values,"PredictedValuesCurrent_2.10.txt",ncol=1)
write(ErrorToTruthCurrent.2.10,"ErrorToTruthCurrent_2.10.txt",ncol=1)
}
else
{
write(Model.2.10$Predicted.Test.Set.Values,"PredictedValuesCurrent_2.10.txt",ncol=1,append=TRUE)
write(ErrorToTruthCurrent.2.10,"ErrorToTruthCurrent_2.10.txt",ncol=1,append=TRUE)
}
control.2.25 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 2, loss.function = "default",MPD = .1,boost=1,boost.num.trees=25)
Model.2.25 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.2.25)
ErrorToTruthCurrent.2.25 <- sum((Model.2.25$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
if(i==1)
{
write(Model.2.25$Predicted.Test.Set.Values,"PredictedValuesCurrent_2.25.txt",ncol=1)
write(ErrorToTruthCurrent.2.25,"ErrorToTruthCurrent_2.25.txt",ncol=1)
}
else
{
write(Model.2.25$Predicted.Test.Set.Values,"PredictedValuesCurrent_2.25.txt",ncol=1,append=TRUE)
write(ErrorToTruthCurrent.2.25,"ErrorToTruthCurrent_2.25.txt",ncol=1,append=TRUE)
}
control.2.50 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 2, loss.function = "default",MPD = .1,boost=1,boost.num.trees=50)
Model.2.50 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.2.50)
ErrorToTruthCurrent.2.50 <- sum((Model.2.50$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
if(i==1) {
write(Model.2.50$Predicted.Test.Set.Values,"PredictedValuesCurrent_2.50.txt",ncol=1)
write(ErrorToTruthCurrent.2.50,"ErrorToTruthCurrent_2.50.txt",ncol=1)
} else {
write(Model.2.50$Predicted.Test.Set.Values,"PredictedValuesCurrent_2.50.txt",ncol=1,append=TRUE)
write(ErrorToTruthCurrent.2.50,"ErrorToTruthCurrent_2.50.txt",ncol=1,append=TRUE)
}
control.3.5 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 3, loss.function = "default",MPD = .1,boost=1,boost.num.trees=5)
Model.3.5 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.3.5)
ErrorToTruthCurrent.3.5 <- sum((Model.3.5$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
if(i==1)
{
write(Model.3.5$Predicted.Test.Set.Values,"PredictedValuesCurrent_3.5.txt",ncol=1)
write(ErrorToTruthCurrent.3.5,"ErrorToTruthCurrent_3.5.txt",ncol=1)
}
else
{
write(Model.3.5$Predicted.Test.Set.Values,"PredictedValuesCurrent_3.5.txt",ncol=1,append=TRUE)
write(ErrorToTruthCurrent.3.5,"ErrorToTruthCurrent_3.5.txt",ncol=1,append=TRUE)
}
control.3.10 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 3, loss.function = "default",MPD = .1,boost=1,boost.num.trees=10)
Model.3.10 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.3.10)
ErrorToTruthCurrent.3.10 <- sum((Model.3.10$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
if(i==1)
{
write(Model.3.10$Predicted.Test.Set.Values,"PredictedValuesCurrent_3.10.txt",ncol=1)
write(ErrorToTruthCurrent.3.10,"ErrorToTruthCurrent_3.10.txt",ncol=1)
}
else
{
write(Model.3.10$Predicted.Test.Set.Values,"PredictedValuesCurrent_3.10.txt",ncol=1,append=TRUE)
write(ErrorToTruthCurrent.3.10,"ErrorToTruthCurrent_3.10.txt",ncol=1,append=TRUE)
}
control.3.25 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 3, loss.function = "default",MPD = .1,boost=1,boost.num.trees=25)
Model.3.25 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.3.25)
ErrorToTruthCurrent.3.25 <- sum((Model.3.25$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
if(i==1)
{
write(Model.3.25$Predicted.Test.Set.Values,"PredictedValuesCurrent_3.25.txt",ncol=1)
write(ErrorToTruthCurrent.3.25,"ErrorToTruthCurrent_3.25.txt",ncol=1)
}
else
{
write(Model.3.25$Predicted.Test.Set.Values,"PredictedValuesCurrent_3.25.txt",ncol=1,append=TRUE)
write(ErrorToTruthCurrent.3.25,"ErrorToTruthCurrent_3.25.txt",ncol=1,append=TRUE)
}
control.3.50 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 3, loss.function = "default",MPD = .1,boost=1,boost.num.trees=50)
Model.3.50 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.3.50)
ErrorToTruthCurrent.3.50 <- sum((Model.3.50$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
if(i==1)
{
write(Model.3.50$Predicted.Test.Set.Values,"PredictedValuesCurrent_3.50.txt",ncol=1)
write(ErrorToTruthCurrent.3.50,"ErrorToTruthCurrent_3.50.txt",ncol=1)
}
else
{
write(Model.3.50$Predicted.Test.Set.Values,"PredictedValuesCurrent_3.50.txt",ncol=1,append=TRUE)
write(ErrorToTruthCurrent.3.50,"ErrorToTruthCurrent_3.50.txt",ncol=1,append=TRUE)
}
}
library(binGroup)
help(binGroup)
help(binom)
??binom
??binomial
p<-c(seq(0.1,0.9,.05))
p
log(p)/log(1-p)
p<-c(seq(0.15,0.2,.01))
log(p)/log(1-p)
p
log(.2)/log(.8)
help(pbinom)
pbinom(1,9,0.18)
pbinom(1,9,0.2)
pbinom(1,9,0.2,lower.tail=FALSE)
pbinom(1,9,0.18,lower.tail=FALSE)
pbinom(1,9,0.25,lower.tail=FALSE)
pbinom(1,9,0.3,lower.tail=FALSE)
pbinom(1,18,0.12,lower.tail=FALSE)
dbinom(1,18,0.12,lower.tail=FALSE)
dbinom(1:18,18,0.12,lower.tail=FALSE)
dbinom(1:18,18,0.12)
sum(dbinom(1:18,18,0.12))
sum(dbinom(1:9,9,0.12))
sum(dbinom(1:9,9,0.15))
sum(dbinom(1:9,9,0.18))
sum(dbinom(1:9,9,0.20))
sum(dbinom(1:9,9,0.21))
sum(dbinom(1:9,9,0.22))
sum(dbinom(1:9,9,0.23))
sum(dbinom(1:9,9,0.2))
sum(dbinom(1:9,9,0.18))
sum(dbinom(1:9,9,0.17))
sum(dbinom(1:9,9,0.16))
control.2.5 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 2, loss.function = "default",MPD = .1,boost=1,boost.num.trees=3)
Model.2.5 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.2.5)
ErrorToTruthCurrent.2.5 <- sum((Model.2.5$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
ErrorToTruthCurrent.2.5
control.2.10 <- DSA.control(vfold=10,minbuck = 10, cut.off.growth = 2, loss.function = "default",MPD = .1,boost=1,boost.num.trees=2)
Model.2.10 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.2.10)
ErrorToTruthCurrent.2.10 <- sum((Model.2.10$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
ErrorToTruthCurrent.2.10
control.2.5 <- DSA.control(vfold=10,minbuck = 5, cut.off.growth = 2, loss.function = "default",MPD = .1,boost=1,boost.num.trees=3)
Model.2.5 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.2.5)
ErrorToTruthCurrent.2.5 <- sum((Model.2.5$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
ErrorToTruthCurrent.2.5
control.2.10 <- DSA.control(vfold=10,minbuck = 5, cut.off.growth = 2, loss.function = "default",MPD = .1,boost=1,boost.num.trees=2)
Model.2.10 <- partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),x.test=dat5.test.x,y.test=dat5.test.y,control = control.2.10)
ErrorToTruthCurrent.2.10 <- sum((Model.2.10$Predicted.Test.Set.Values-dat5.test.y)^2)/n.test
ErrorToTruthCurrent.2.10
ErrorToTruthCurrent.rf
leafytrees <- 500
leafy.random.num.variables.per.split <- ncol(dat5.training.x)
leafy.subsample <- 0
control.leafy <- DSA.control(vfold=1,minbuck = 5, cut.off.growth = chosen.model.plusone, loss.function = "default",leafy.num.trees=leafytrees,leafy.random.num.variables.per.split = leafy.random.num.variables.per.split,MPD = .1 ,leafy = 1, leafy.subsample=leafy.subsample,missing='impute.at.split',save.input=TRUE)
Model.leafy <-partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),control = control.leafy)
cv.risk
cv.risk
cv.risk[is.na(cv.risk)]
cv.risk[is.na(cv.risk)] <- Inf
chosen.model
chosen.model.plusone
chosen.model <- min(order(cv.risk)[1],ncol(PredictedCurrent))
chosen.model.plusone <- min(chosen.model+1,25,ncol(PredictedCurrent))
PredictedValuesCurrent<-PredictedCurrent[,chosen.model]
keepers.model <- which(!is.na(PredictedValuesCurrent))
ErrorToTruthCurrent.partDSA <-(sum(( PredictedValuesCurrent[keepers.model] - as.matrix(dat5.test.y[keepers.model]))^2))/length(keepers.model)
ErrorToTruthCurrent.partDSA
leafytrees <- 500
leafy.random.num.variables.per.split <- ncol(dat5.training.x)
leafy.subsample <- 0
control.leafy <- DSA.control(vfold=1,minbuck = 5, cut.off.growth = chosen.model.plusone, loss.function = "default",leafy.num.trees=leafytrees,leafy.random.num.variables.per.split = leafy.random.num.variables.per.split,MPD = .1 ,leafy = 1, leafy.subsample=leafy.subsample,missing='impute.at.split',save.input=TRUE)
Model.leafy <-partDSA(x=dat5.training.x,y=as.matrix(dat5.training.y),control = control.leafy)
control.leafy <- DSA.control(vfold=1,minbuck = 5, cut.off.growth = chosen.model.plusone,
loss.function = "default",leafy.num.trees=leafytrees,
leafy.random.num.variables.per.split = leafy.random.num.variables.per.split,
MPD = .1 ,leafy = 1, leafy.subsample=leafy.subsample,missing='impute.at.split',save.input=TRUE)
Model.rf<-randomForest(x=dat5.training.x,y=as.matrix(dat5.training.y),ntree = 500)
PredictedValuesCurrent.rf <-predict(Model.rf,dat5.test.x)
PredictedErrorCurrent.rf <-sum(((PredictedValuesCurrent.rf - dat5.test.y)^2))/n.test
VIMPCurrent.rf<-Model.rf$importance
ErrorToTruthCurrent.rf<-(sum(( PredictedValuesCurrent.rf - as.matrix(dat5.test.y))^2))/n.test
ErrorToTruthCurrent.rf
q()
library(rpart)
help(rpart)
minsplit=20
minbuck=round(minsplit/3)
minbuck
install.packages("~/Box Sync/Projects/R01/partDSA/Code (molinaroa@neurosurg.ucsf.edu)/partdsa/pkg/partDSA_0.9.6.tar.gz", repos = NULL, type = "source")
y.out=as.factor(sample(c("a", "b", "c"), 50, TRUE) )
x1=rexp(50)
x2=runif(50)
y.out.test=as.factor(sample(c("a", "b", "c"), 100, TRUE) )
x1.test=rexp(100)
x2.test=runif(100)
model2<-partDSA(x=data.frame(x1,x2),y=y.out,x.test=data.frame(x1=x1.test,x2=x2.test),y.test=y.out.test)
help(partDSA)
model2
model3<-partDSA(x=data.frame(x1,x2),y=y.out,x.test=data.frame(x1=x1.test,x2=x2.test),y.test=y.out.test,minsplit=15)
partDSA
install.packages("~/Box Sync/Projects/R01/partDSA/Code (molinaroa@neurosurg.ucsf.edu)/partdsa/pkg/partDSA_0.9.6.tar.gz", repos = NULL, type = "source")
library(partDSA)
partDSA()
partDSA
q()
